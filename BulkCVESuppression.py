import sys
import argparse
import logging
import json
import datetime

import anticrlf
from veracode_api_py.api import VeracodeAPI as vapi, Applications, Findings, SCAApplications


log = logging.getLogger(__name__)

# ----------------- CONFIGURATION -----------------
cve_to_mitigate = 'CVE-2018-1199' #CVE To suppress. For example: 'CVE-2018-1199'
propose_action = 'BYDESIGN' #REASON in Propose action. Acceptable Values are: ['BYENV', 'BYDESIGN', 'FP', 'ACCEPTRISK']
propose_comment = 'Proposal comment to auto suppress CVE' #COMMENT required to propose a mitigation
approve_comment = 'Bulk suppression of CVE - Approval' #COMMENT required to accept a mitigation
reject_comment = 'Bulk rejection of CVE - Rejection' #COMMENT required to reject a mitigation
bulk_action = 'SUPPRESS' # Use 'SUPPRESS' to auto-approve a mitigation OR 'EXPOSE' to reject a previously auto-approved mitigation
#-------------- END CONFIGURATION -----------------

def setup_logger():
    handler = logging.FileHandler('BulkCVESuppression.log', encoding='utf8')
    handler.setFormatter(anticrlf.LogFormatter('%(asctime)s - %(levelname)s - %(funcName)s - %(message)s'))
    log = logging.getLogger(__name__)
    log.addHandler(handler)
    log.setLevel(logging.INFO) #DEBUG

def creds_expire_days_warning():
    creds = vapi().get_creds()
    exp = datetime.datetime.strptime(creds['expiration_ts'], "%Y-%m-%dT%H:%M:%S.%f%z")
    delta = exp - datetime.datetime.now().astimezone() #we get a datetime with timezone...
    if (delta.days < 7):
        print('These API credentials expire ', creds['expiration_ts'])

def logprint(log_msg):
    log.info(log_msg)

def get_all_apps():
    
    all_apps = Applications().get_all()
    all_apps_guids = []
    matching_app_guids = [ma['guid'] for ma in all_apps]
    all_apps_guids.extend(matching_app_guids)
    log.debug('Retrieved all App guids: {}'.format(matching_app_guids))

    # Call appropriate function based on bulk_action
    if bulk_action == 'SUPPRESS':
        apply_bulk_mitigations(all_apps_guids)
    elif bulk_action == 'EXPOSE':
        reverse_bulk_mitigations(all_apps_guids)
    else:
        log.error('Invalid bulk_action parameter. Exiting...')
        sys.exit(1)
  

def apply_bulk_mitigations(guids):
    log.info('Starting bulk approvals')
    for count, app in enumerate(guids):
        status = 'App Count: {} - Checking findings for app {}'.format(count, app)
        log.debug(status)
        request_params = { 'size': 100, 'cve': cve_to_mitigate  } # increase page size for perf
        try:
            these_findings = Findings().get_findings(app=app, scantype='SCA', request_params=request_params)
        except:
            log.info('Error fetching findings for app guid: {}'.format(app))

        if len(these_findings) >= 1:
            status = 'Found a total of {} findings for application guid {}'.format(len(these_findings),app)
            log.info(status)
            
            for items in these_findings:
                findings_component = items['finding_details']['component_filename']
                findings_component_id = items['finding_details']['component_id']
                count = 0
                status = 'Found ' + findings_component + ', ID: ' + findings_component_id + ' with CVE: ' + cve_to_mitigate
                log.info(status)

                #check for proposed, approved or rejected mitigations and skip
                annotation_exists = SCAApplications().get_annotations(app,cve_name=cve_to_mitigate,annotation_type='VULNERABILITY' )
                proposed_mitigation = annotation_exists['proposed_annotations']
                approved_mitigation = annotation_exists['approved_annotations']
                rejected_mitigation = annotation_exists['rejected_annotations']
                if len(proposed_mitigation) >= 1 or len(approved_mitigation) >= 1 or len(rejected_mitigation) >= 1:
                    for items in proposed_mitigation:                        
                        if items['component']['id'] == findings_component_id:
                            count += 1
                            log.info('Skipping. Proposed mitigation already exists for: ' + items['component']['filename'])
                            log.info('Proposed mitigation reason: ' + items['latest_comment'])
                    for items in approved_mitigation:
                        if items['component']['id'] == findings_component_id:
                            count += 1
                            log.info('Skipping. Approved mitigation already exists for:: ' + items['component']['filename'])
                            log.info('Approved mitigation reason: ' + items['latest_comment'])
                    for items in rejected_mitigation:
                        if items['component']['id'] == findings_component_id and items['latest_comment'] != reject_comment:
                            count += 1
                            log.info('Skipping. Rejected mitigation already exists for:: ' + items['component']['filename'])
                            log.info('Rejected mitigation reason: ' + items['latest_comment'])
                            
                if count == 0:
                    log.info('No mitigation or bulk mitigation found for ' + findings_component + '. Proceeding with auto-mitigating CVE')
                    try:
                        SCAApplications().add_annotation(app,action=propose_action, comment=propose_comment, annotation_type='VULNERABILITY', component_id=findings_component_id, cve_name=cve_to_mitigate)
                        log.info('Successfully PROPOSED mitigation')
                        SCAApplications().add_annotation(app,action='APPROVE', comment=approve_comment, annotation_type='VULNERABILITY', component_id=findings_component_id, cve_name=cve_to_mitigate)
                        log.info('Successfully APPROVED mitigation')
                    except:
                        log.info('Something went wrong')



#to reverse a previously bulk mitigated CVE, script will search for all Approved mitigations with specific "latest_comment" and reject them

def reverse_bulk_mitigations(guids):
    log.info('Starting bulk un-approvals')
    for count, app in enumerate(guids):
        status = 'App Count: {} - Checking findings for app {}'.format(count, app)
        log.debug(status)
        request_params = { 'size': 100, 'cve': cve_to_mitigate  } # increase page size for perf
        try:
            these_findings = Findings().get_findings(app=app, scantype='SCA', request_params=request_params)
        except:
            log.info('Error fetching findings for app guid: {}'.format(app))
            continue

        if len(these_findings) >= 1:
            status = 'Found a total of {} findings for application guid {}'.format(len(these_findings),app)
            log.info(status)
            
            for items in these_findings:
                findings_component = items['finding_details']['component_filename']
                findings_component_id = items['finding_details']['component_id']
                count = 0
                status = 'Found ' + findings_component + ', ID: ' + findings_component_id + ' with CVE: ' + cve_to_mitigate
                log.info(status)

                #check for approved mitigations and bulk-approved comment before rejecting
                annotation_exists = SCAApplications().get_annotations(app,cve_name=cve_to_mitigate,annotation_type='VULNERABILITY' )
                approved_mitigation = annotation_exists['approved_annotations']
                if len(approved_mitigation) >= 1:
                    for items in approved_mitigation:
                        if items['component']['id'] == findings_component_id and items['latest_comment'] == approve_comment:
                            count += 1
                            log.info('Found approved mitigation with specific comment for: ' + items['component']['filename'])
                            log.info('Approved mitigation reason: ' + items['latest_comment'])
                            try:
                                SCAApplications().add_annotation(app,action='REJECT', comment=reject_comment, annotation_type='VULNERABILITY', component_id=findings_component_id, cve_name=cve_to_mitigate)
                                log.info('Successfully REJECTED mitigation')
                            except:
                                log.info('Something went wrong')
                




def main():
    setup_logger()

    logprint('======== beginning BulkCVESuppression.py run ========')

   
    # CHECK FOR CREDENTIALS EXPIRATION
    creds_expire_days_warning()

    # START PROCESSING ALL APPS
    get_all_apps()



if __name__ == '__main__':
#TODO: Read inputs from file
    main()